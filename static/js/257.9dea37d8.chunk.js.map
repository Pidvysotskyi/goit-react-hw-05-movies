{"version":3,"file":"static/js/257.9dea37d8.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","utils/Backend_API.jsx","utils/baseImageUrl.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const StyledLink = styled(NavLink)`\n  display: inline-block;\n  text-decoration: none;\n  color: darkgray;\n  padding: 6px;\n  border: solid 1px black;\n  border-radius: 2px;\n  margin-right: 10px;\n  margin-bottom: 10px;\n\n  &.active {\n    color: white;\n    background-color: black;\n  }\n  :hover:not(.active),\n  :focus:not(.active) {\n    color: white;\n    background-color: darkgray;\n  }\n`;\n","import { useEffect, useState } from \"react\";\nimport { Outlet, useParams, useLocation } from \"react-router-dom\";\nimport { getMovieDetails } from \"utils/Backend_API\";\nimport { BASE_IMG_URL } from \"utils/baseImageUrl\";\nimport { Box } from \"components/Box\";\nimport { StyledLink } from \"./MovieDetails.styled\";\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const { movieId } = useParams();\n  const [posterPath, setPosterPath] = useState(\"\");\n  const [tagLine, setTagLine] = useState({});\n  const [originalTitle, setOriginalTitle] = useState(\"\");\n  const [releaseDate, setReleaseDate] = useState(\"\");\n  const [userScore, setUserScore] = useState(0);\n  const [overview, setOverview] = useState(\"\");\n  const [genres, setGenres] = useState(\"\");\n\n  useEffect(() => {\n    getMovieDetails(movieId).then(\n      ({\n        original_title,\n        release_date,\n        poster_path,\n        tagline,\n        vote_average,\n        genres,\n        overview,\n      }) => {\n        setOriginalTitle(original_title);\n        setReleaseDate(release_date.slice(0, 4));\n        setPosterPath(BASE_IMG_URL + poster_path);\n        setTagLine(tagline);\n        setUserScore(Math.floor(Number(vote_average) * 10));\n        setGenres(genres.map(genre => genre.name).join(\", \"));\n        setOverview(overview);\n      }\n    );\n  }, [movieId]);\n\n  const backPath = location.state?.from ?? \"/\";\n\n  return (\n    <Box>\n      <StyledLink to={backPath}>Go back</StyledLink>\n      <Box display=\"flex\">\n        <img src={posterPath} alt={tagLine} width=\"300\" />\n        <Box ml=\"20px\">\n          <h2>\n            {originalTitle} / {releaseDate}\n          </h2>\n          <p>\n            <b>User score:</b>\n            {userScore}%\n          </p>\n          <h3>Overview</h3>\n          {overview}\n          <h4>Genres</h4>\n          <p>{genres}</p>\n        </Box>\n      </Box>\n      <div>\n        <p>Additional information</p>\n        <StyledLink to=\"cast\" state={{ from: backPath }}>\n          cast\n        </StyledLink>\n        <StyledLink to=\"reviews\" state={{ from: backPath }}>\n          reviews\n        </StyledLink>\n      </div>\n      <Outlet />\n    </Box>\n  );\n};\n\nexport default MovieDetails;\n","import axios from \"axios\";\n\nconst API_KEY = \"957ce6bf29368070d7b55378b1d4459e\";\n\nexport function getTrending() {\n  return axios\n    .get(`https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`)\n    .then(response => response.data.results);\n}\nexport function getByQuery(query) {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n    )\n    .then(response => response.data.results);\n}\nexport function getMovieDetails(movieId) {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    )\n    .then(response => response.data);\n}\nexport function getMovieCredits(movieId) {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    )\n    .then(response => response.data);\n}\nexport function getMovieReviews(movieId) {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    )\n    .then(response => response.data.results);\n}\n","export const BASE_IMG_URL =\n  'https://www.themoviedb.org/t/p/w600_and_h900_bestv2/';\n"],"names":["StyledLink","styled","NavLink","location","useLocation","movieId","useParams","useState","posterPath","setPosterPath","tagLine","setTagLine","originalTitle","setOriginalTitle","releaseDate","setReleaseDate","userScore","setUserScore","overview","setOverview","genres","setGenres","useEffect","getMovieDetails","then","original_title","release_date","poster_path","tagline","vote_average","slice","BASE_IMG_URL","Math","floor","Number","map","genre","name","join","backPath","state","from","Box","to","display","src","alt","width","ml","API_KEY","getTrending","axios","response","data","results","getByQuery","query","getMovieCredits","getMovieReviews"],"sourceRoot":""}